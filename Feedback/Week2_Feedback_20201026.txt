Starting code feedback for Tristan, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.60 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week3, .git, Feedback, Week1, Week2

Found the following files in parent directory: README.md, .gitignore, control_flow.R

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*.aux 
*.bbl 
*.blg 
*fdb* 
*.fls 
*.log 
*.syncte* 
*~ 
*.tmp

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEECourseWork

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Data, Code, Results, Sandbox

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Welcome to Week2
Sandbox is for personal fun and in the Data directory you will find files holding relevant data to the scripts in Code and for use in Sandbox
For the Code directory I will go into more detail.

### In Code you shall find:
 
 Script       | Description
 ------------- | -------------
 align_seqs.py | Aligns 2 sequences from a given fasta file 
 basic_csv | write a file containing only species name and Body mass
 basic_io1.py | prints lines from a file
 basic_io2.py | appends a file
 basic_io3.py | outputs dictionary to file
 boilerplate.py | boilerplate for python scripts
 cfexercises1.py | script holding various functions to demonstrate control flow
 cfexercises2.py | practice for loop scripts
 control_flow.py | python program for demonstrating control flow tools
 debugme.py | script with a bug
 dictionary.py | a short python script to populate a dictionary called taxa_dic derived from  taxa so that it maps order names to sets of taxa.
 lc1.py | list comprehensions
 lc2.py | further list comprehensions
 loops.py | further loops practice
 oaks_debugme.py | debugged program for finding oak species in a csv file
 oaks.py | further list comprehension practice
 sysargv.py | demonstrating what sysargv is
 test_control_flow.py | doctest practice
 tuple.py | function for printing bird names and masses from tuple
 using_name.py | showing what name and main are in writing a python program:

**********************************************************************

Results directory is empty - good! 

Found 20 code files: tuple.py, boilerplate.py, basic_io2.py, oaks.py, cfexercises2.py, basic_io1.py, oaks_debugme.py, loops.py, dictionary.py, lc2.py, basic_io3.py, control_flow.py, cfexercises1.py, test_control_flow.py, basic_csv.py, debugme.py, align_seqs.py, sysargv.py, lc1.py, using_name.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!

for x in birds:
    print('Latin name:', x[0])
    print('Common name:', x[1])
    print('Mass:', x[2])


**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 98

Output (only first 500 characters): 


**********************************************************************
Latin name: Passerculus sandwichensis
Common name: Savannah sparrow
Mass: 18.7
Latin name: Delichon urbica
Common name: House martin
Mass: 19
Latin name: Junco phaeonotus
Common name: Yellow-eyed junco
Mass: 19.5
Latin name: Junco hyemalis
Common name: Dark-eyed junco
Mass: 19.6
Latin name: Tachycineata bicolor
Common name: Tree swallow
Mass: 20.2

**********************************************************************

Code ran without errors

Time consumed = 0.08201s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
	You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys

## constants ##


## functions ##
def main(argv):
	""" Main entry point of the program """
	print('This is a boilerplate')
	return 0

if __name__ == "__main__":
	""" Makes sure the "main" function is called from command line """
	status = main(sys.argv)
	sys.exit(status)


**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.07987s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../Sandbox/testout.txt', 'w')
for i in list_to_save:
    f.write(str(i) + '\n')

f.close()

**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 96

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07463s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.08661s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
for j in range(12):
    if j % 3 == 0:
        print('hello')

for j in range(15):
     if j % 5 == 3:
        print('hello')
     elif j % 4 == 3:
        print('hello')

z = 0
while z != 15:
    print('hello')
    z = z + 3

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 91.5

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.09008s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
##############################
# FILE INPUT
##############################
#Open a file for reading
f = open('../Sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../Sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()
**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 89.5

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line

**********************************************************************

Code ran without errors

Time consumed = 0.09231s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
import csv
import sys

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus' """
    return name.lower().startswith('*quercus*')

def main(argv): 
    f = open('../Data/TestOaksData.csv','r')
    g = open('../Data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 88.5

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

['Quercus', ' petraea']
The genus is: 
Quercus


**********************************************************************

Code ran without errors

Time consumed = 0.10444s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
# FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops  in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!
**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 86.5

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.51596s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa. 
# E.g. 'Chiroptera' : set(['Myotis lucifugus']) etc.  


taxa_dic = {}
for species in taxa:
        tmp = species[1]
        taxa_dic[species[1]] = set([species[0] \
        for species in taxa if tmp == species[1]])
print(taxa_dic)

# or:
# but I don't fully understand this one as it is internet sourced so not using it yet XD
# print("\n".join("{}\t{}".format(k, v) for k, v in taxa_dic.items()))

**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 84.5

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Cleithrionomys rutilus', 'Gerbillus henleyi', 'Mus domesticus', 'Peromyscus crinitus'}, 'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}, 'Carnivora': {'Lyacon pictus', 'Canis lupus', 'Arctocephalus gazella'}}

**********************************************************************

Code ran without errors

Time consumed = 0.19947s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
heavyrain = [month for month in rainfall if month[1] > 100]
 
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 
lightshowers = [month[0] for month in rainfall if month[1] < 50]

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 
# (3.1)
heavyrain2 = []
for month in rainfall:
    if month[1] > 100:
        heavyrain2.append(month)
print(heavyrain2)

# (3.2)
lightshowers2 = []
lightshowers2 = []
for month in rainfall:
    if month[1] < 50:
        lightshowers2.append(month[0])
print(lightshowers2)
**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 82.5

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.10796s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
########################
# STORING OBJECTS
########################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../Sandbox/testp.p', 'wb') #note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

print(another_dictionary)
**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 80.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "basic_io3.py", line 13, in <module>
    print(another_dictionary)
NameError: name 'another_dictionary' is not defined

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
__appname__ = 'control_flow.py'
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys

## constants ##


## functions ##
def even_or_odd(x=0):

	"""FInd whether a number x is even or odd."""
	if x % 2 == 0:
		return "%d is Even!" % x
	return "%d is Odd!" % x

def largest_divisor_five(x=120):
	"""Find which is the largest divisor of x among 2,3,4,5."""
	largest=0
	if x % 5 ==0:
		largest = 5
	elif x % 4 == 0: #means "else, if"
		largest = 4
	elif x % 3 == 0:
		largest = 3
	elif x % 2 == 0:
		largest = 2
	else: # When all other (if, elif) conditions are not met
		return "No divisor found for %d!" % x # Each function can return a value or a variable.
	return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
	"""Find whether an integer is prime."""
	for i in range(2, x): #  "range" returns a sequence of integers
		if x % i == 0:
		  print("%d is not a prime: %d is a divisor" % (x, i)) 
		  return False
	print("%d is a prime!" % x)
	return True 

def find_all_primes(x=22):
	"""Find all the primes up to x"""
	allprimes = []
	for i in range(2, x + 1):
		if is_prime(i):
			allprimes.append(i)
	print("There are %d primes between 2 and %d" % (len(allprimes), x))
	return allprimes


def main(argv):
	print(even_or_odd(22))
	print(even_or_odd(33))
	print(largest_divisor_five(120))
	print(largest_divisor_five(121))
	print(is_prime(60))
	print(is_prime(59))
	print(find_all_primes(100))
	return 0

if __name__ == "__main__":
	""" Makes sure the "main" function is called from command line """
	status = main(sys.argv)
	sys.exit(status)


**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 80.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.07810s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
__author__ = 'Tristan Canterbury (tjc19@ic.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys

## functions ##
def foo_1(x=25): 
    """Returns the square root of x"""
    return x ** 0.5

def foo_2(x=4, y=3): 
    """returns the bigger of 2 values"""
    if x > y:
        return x
    return y

def foo_3(x=0.023, y=0.99, z=0.001): 
    """Moves the largest variable to the end of the vector"""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo_4(x=5): 
    """Calculates factorial of x using the range function for explicitness"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x=6): 
    """a recursive function that calculates the factorial of x"""
    if x == 1:
        return 1
    return x * foo_5(x - 1)
     
def foo_6(x=7): 
    """Calculate the factorial of x in a different way"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto
     
def main(argv):
    print(foo_1(10))
    print(foo_2( 4, 7))
    print(foo_3(3, 4, 1))
    print(foo_4(4))
    print(foo_5(7))
    print(foo_6(8))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 80.0

Output (only first 500 characters): 


**********************************************************************
3.1622776601683795
7
[3, 1, 4]
24
5040
40320

**********************************************************************

Code ran without errors

Time consumed = 0.08242s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__appname__ = 'control_flow.py'
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys
import doctest


def even_or_odd(x=0):
	"""Find whether a number x is even or odd.
      
	>>> even_or_odd(10)
	'10 is Even!'
    
	>>> even_or_odd(5)
	'5 is Odd!'
    
	whenever a float is provided, then the closest integer is used:    
	>>> even_or_odd(3.2)
	'3 is Odd!'
    
	in case of negative numbers, the positive is taken:    
	>>> even_or_odd(-2)
	'-2 is Even!'
    
	"""
	#Define function to be tested
	if x % 2 == 0:
		return "%d is Even!" % x
	return "%d is Odd!" % x

####### I SUPPRESSED THIS BLOCK SO THAT DOCTEST CAN BE IN CONTROL OF THE FUNCTIONS AND IMPLEMENT IT'S OWN FLOW #######
#def main(argv):
#	print(even_or_odd(22))
#	print(even_or_odd(33))
#	print(largest_divisor_five(120))
#	print(largest_divisor_five(121))
#	print(is_prime(60))
#	print(is_prime(59))
#	print(find_all_primes(100))
#	return 0

#if __name__ == "__main__":
#	""" Makes sure the "main" function is called from command line """
#	status = main(sys.argv)
#	sys.exit(status)
#####################################################################################################################

doctest.testmod() #To run with embedded tests
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 80.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.21574s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
f=open('../../Data/testcsv.csv', 'r')

csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("The species is", row[0])

f.close()

#write a file containing only species name and Body mass
f = open('../Data/testcsv.csv', 'r')
g = open('../Data/bodymass.csv', 'w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    print(row)
    csvwrite.writerow([row[0], row[4]])

f.close()
g.close()
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 78.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "basic_csv.py", line 5, in <module>
    f=open('../../Data/testcsv.csv', 'r')
FileNotFoundError: [Errno 2] No such file or directory: '../../Data/testcsv.csv'

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
def makeabug(x):
    y = x**4
    z = 0
    y = y/z
    return y

makeabug(25)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 75.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "debugme.py", line 7, in <module>
    makeabug(25)
  File "debugme.py", line 4, in makeabug
    y = y/z
ZeroDivisionError: division by zero

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""simple alignement program for 2 DNA sequences"""

__appname__ = 'align_seqs.py'
__author__ = 'Tristan JC (tjc19@ic.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys
#may need to install Biopython
from Bio import SeqIO

## functions ##
def parseq(x):
	"""parses the sequences from a given .fasta file"""
	seqs = list() 
	for i in SeqIO.parse(x, "fasta"): 
		seqs.append(str(i.seq))
	return seqs

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

def ordseq(x): 
	"""Takes 2 sequences from 1 .fasta file and puts them in size order and gives their respective lengths"""
	seqs = parseq(x)
	seq1 = seqs[0]
	seq2 = seqs[1] 
	l1 = len(seq1)
	l2 = len(seq2)
	if l1 >= l2:
		s1 = seq1
		s2 = seq2
	else:
		s1 = seq2
		s2 = seq1
		l1, l2 = l2, l1 # swap the two lengths
	return s1, s2, l1, l2


# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
	"""calculates the alignment score fror a given alignment"""
	matched = "" # to hold string displaying alignements
	score = 0
	for i in range(l2):
		if (i + startpoint) < l1:
			if s1[i + startpoint] == s2[i]: # if the bases match
				matched = matched + "*"
				score = score + 1
			else:
				matched = matched + "-"

	# some formatted output
	print("Testing startpoint: ", startpoint, " Score = ", score, end="\r")

	return score

def bestalig(s1, s2, l1, l2):
	"""finds one of the best of all possible alignments"""
	# now try to find the best match (highest score) for the two sequences
	my_best_align = None
	my_best_score = -1

	for i in range(l1): # Note that you just take the last alignment with the highest score
		z = calculate_score(s1, s2, l1, l2, i)
		if z > my_best_score:
			my_best_align = "." * i + s2 # think about what this is doing!
			my_best_score = z  
	f=open("../Results/bestalig.txt", "w+")
	f.write("Best alignment: %s\n" % my_best_align) 
	f.write("                %s\n" % s1) 
	f.write("Alignment score: %d" % my_best_score)
	f.close()

	print("Done! You will find your aligned sequences at '../Results/bestalig.txt'")
	return 0


def main(argv):
	if len(argv) == 1:
		print("no arguments given, using test argument '../Data/multifas.fasta'")
		s=ordseq("../Data/multifas.fasta")
		bestalig(s[0], s[1], s[2], s[3])
	elif len(argv)==2:
		if argv[1].endswith('.fasta'):
			s=ordseq(argv[1])
			bestalig(s[0], s[1], s[2], s[3])
		else:
			print("Improper arguments given, program takes 1 fasta file")
	else:
		print("Improper arguments given, program takes 1 fasta file")
	return 0

if __name__ == "__main__":
	status = main(sys.argv)
	sys.exit(status)

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 75.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "align_seqs.py", line 12, in <module>
    from Bio import SeqIO
ModuleNotFoundError: No module named 'Bio'

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))
**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 73.0

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.06334s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 
# latin names (gs - genus species)
birdgs1 = [species[0] for species in birds]
print(birdgs1)

# common names
birdname1 = [species[1] for species in birds]
print(birdname1)

# mean body masses
birdmass1 = [species[2] for species in birds]
print(birdmass1)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 
# latin names
birdgs2 = []
for species in birds:
    birdgs2.append(species[0])
print(birdgs2)

# common names
birdname2 = []
for species in birds:
    birdname2.append(species[1])
print(birdname2)

# mean body mass
birdmass2 = []
for species in birds:
    birdmass2.append(species[2])
print(birdmass2)

**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 71.0

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.06845s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('THis program is being run by itself')
else:
    print('THis program is being imported from another module')

print("This module's name is:" + __name__)
**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 69.0

Output (only first 500 characters): 


**********************************************************************
THis program is being run by itself
This module's name is:__main__

**********************************************************************

Code ran without errors

Time consumed = 0.07283s

======================================================================
======================================================================
Finished running scripts

Ran into 4 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 69.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!